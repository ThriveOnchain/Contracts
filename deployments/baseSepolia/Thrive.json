{
  "address": "0x45d6f21a7eb2eD96200Dc645ce2c0081AaFc2fA5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SafeLockRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ThriveUtils.LockPeriod",
          "name": "lockPeriod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "SaveLockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "savingsId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "TargetSavingsCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "savingsId",
          "type": "uint256"
        }
      ],
      "name": "TargetSavingsCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "savingsId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalAmount",
          "type": "uint256"
        }
      ],
      "name": "TargetSavingsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE_APY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAYS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EARLY_WITHDRAWAL_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_savingsId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addToTargetSavings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimSafeLockRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_savingsId",
          "type": "uint256"
        }
      ],
      "name": "completeTargetSavings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_purpose",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ThriveUtils.LockPeriod",
          "name": "_durationDays",
          "type": "uint8"
        }
      ],
      "name": "createTargetSavings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllActiveSaveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInActiveSaveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTargetSavingsIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "getSaveLockDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lockToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "withdrawn",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accumulatedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThriveUtils.SaveLock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_savingsId",
          "type": "uint256"
        }
      ],
      "name": "getTargetSavingsDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "purpose",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "targetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "accumulatedRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDepositTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct ThriveUtils.TargetSavings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnclaimedSafeLockRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserActiveSaveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserActiveTargetSavingsIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInActiveSaveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum ThriveUtils.LockPeriod",
          "name": "_lockPeriod",
          "type": "uint8"
        }
      ],
      "name": "saveLockFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "saveLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lockToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "withdrawn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "targetSavings",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "purpose",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userUSDRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockId",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4eb2241db29ad0438aa398a918e79f73cdedf6232e10d48edc0b89d83e317792",
  "receipt": {
    "to": null,
    "from": "0xE3c347cEa95B7BfdB921074bdb39b8571F905f6D",
    "contractAddress": "0x45d6f21a7eb2eD96200Dc645ce2c0081AaFc2fA5",
    "transactionIndex": 8,
    "gasUsed": "2141646",
    "logsBloom": "0x
    "blockHash": "0x5a9b56b921b5bc43dcbd816b059e66c67c13f2c34b8c4d23f7c6d597362f4b7a",
    "transactionHash": "0x4eb2241db29ad0438aa398a918e79f73cdedf6232e10d48edc0b89d83e317792",
    "logs": [],
    "blockNumber": 14090750,
    "cumulativeGasUsed": "8580431",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x036CbD53842c5426634e7929541eC2318f3dCF7e"
  ],
  "numDeployments": 3,
  "solcInputHash": "a159cb034cf7aef17b9c5301c33a1529",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SafeLockRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ThriveUtils.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"SaveLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"savingsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"TargetSavingsCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"savingsId\",\"type\":\"uint256\"}],\"name\":\"TargetSavingsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"savingsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalAmount\",\"type\":\"uint256\"}],\"name\":\"TargetSavingsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_WITHDRAWAL_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_savingsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToTargetSavings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSafeLockRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_savingsId\",\"type\":\"uint256\"}],\"name\":\"completeTargetSavings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_purpose\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ThriveUtils.LockPeriod\",\"name\":\"_durationDays\",\"type\":\"uint8\"}],\"name\":\"createTargetSavings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveSaveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInActiveSaveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTargetSavingsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"getSaveLockDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ThriveUtils.SaveLock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_savingsId\",\"type\":\"uint256\"}],\"name\":\"getTargetSavingsDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTime\",\"type\":\"uint256\"}],\"internalType\":\"struct ThriveUtils.TargetSavings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnclaimedSafeLockRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserActiveSaveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserActiveTargetSavingsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInActiveSaveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum ThriveUtils.LockPeriod\",\"name\":\"_lockPeriod\",\"type\":\"uint8\"}],\"name\":\"saveLockFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saveLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lockToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetSavings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUSDRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockId\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createTargetSavings(string,uint256,uint8)\":{\"details\":\"Creates a new target savings goal\",\"params\":{\"_durationDays\":\"The duration of the savings period in days\",\"_purpose\":\"The purpose of the savings goal\",\"_targetAmount\":\"The target amount to save\"}},\"saveLockFunds(address,string,uint256,uint8)\":{\"details\":\"Creates a new save lock for the user\",\"params\":{\"_amount\":\"The amount of USDC to lock\",\"_lockPeriod\":\"The duration of the lock\"}},\"withdrawLockedFunds(uint256)\":{\"details\":\"Allows user to withdraw funds from a save lock\",\"params\":{\"_lockId\":\"The ID of the save lock to withdraw from\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Thrive.sol\":\"Thrive\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Thrive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"./lib/thriveutils.sol\\\";\\r\\n\\r\\ncontract Thrive is ReentrancyGuard {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n\\t// State variables\\r\\n\\taddress public immutable usdc;\\r\\n\\tuint256 public constant EARLY_WITHDRAWAL_FEE_PERCENTAGE = 1000; // 10% fee represented as 1000 basis points\\r\\n\\tuint256 public constant DAYS_PER_YEAR = 365;\\r\\n\\tuint256 public constant AAVE_APY = 200; // 2% APY, represented as 200 basis points\\r\\n\\tuint256 public constant SCALE = 1e18; // Used for precision in calculations\\r\\n\\r\\n\\t//SAVELOCK ITEMS STATES ........................................\\r\\n\\t// Mapping to store SaveLock structs\\r\\n\\tmapping(uint256 => ThriveUtils.SaveLock) public saveLocks;\\r\\n\\t// EnumerableSet to keep track of user's save locks\\r\\n\\tmapping(address => EnumerableSet.UintSet) private userActiveSaveLocks;\\r\\n\\tmapping(address => EnumerableSet.UintSet) private userInActiveSaveLocks;\\r\\n\\r\\n\\t// EnumerableSet to keep track of all save locks\\r\\n\\tEnumerableSet.UintSet private allActiveSaveLocks;\\r\\n\\tEnumerableSet.UintSet private allInActiveSaveLocks;\\r\\n\\r\\n\\t// Counter for generating unique save lock IDs\\r\\n\\tuint256 private nextSaveLockId = 1;\\r\\n\\r\\n\\t//TARGET LOCK STATES...............................................\\r\\n\\tmapping(uint256 => ThriveUtils.TargetSavings) public targetSavings;\\r\\n\\tmapping(address => EnumerableSet.UintSet) private userTargetSavings;\\r\\n\\tEnumerableSet.UintSet private allTargetSavings;\\r\\n\\r\\n\\tuint256 private nextTargetSavingsId = 1;\\r\\n\\r\\n\\t//user rewards on savings\\r\\n\\tmapping(address => uint256) public userUSDRewards;\\r\\n\\r\\n\\t// EVENTS\\r\\n\\t//SaveLock events\\r\\n\\tevent SaveLockCreated(\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tThriveUtils.LockPeriod lockPeriod,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 indexed lockId\\r\\n\\t);\\r\\n\\r\\n\\tevent FundsWithdrawn(\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 amountWithdrawn,\\r\\n\\t\\tuint256 rewardAmount,\\r\\n\\t\\tuint256 fee,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 indexed lockId\\r\\n\\t);\\r\\n\\t//Target lock events\\r\\n\\tevent TargetSavingsCreated(\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\tstring purpose,\\r\\n\\t\\tuint256 targetAmount,\\r\\n\\t\\tuint256 indexed startTime,\\r\\n\\t\\tuint256 endTime,\\r\\n\\t\\tuint256 indexed savingsId\\r\\n\\t);\\r\\n\\r\\n\\tevent TargetSavingsUpdated(\\r\\n\\t\\tuint256 indexed savingsId,\\r\\n\\t\\tuint256 amountAdded,\\r\\n\\t\\tuint256 newTotalAmount\\r\\n\\t);\\r\\n\\r\\n\\tevent TargetSavingsCompleted(\\r\\n\\t\\tuint256 indexed savingsId,\\r\\n\\t\\tuint256 totalAmount,\\r\\n\\t\\tuint256 rewardAmount\\r\\n\\t);\\r\\n\\r\\n\\t//rewards events\\r\\n\\tevent SafeLockRewardsClaimed(address indexed user, uint256 amount);\\r\\n\\r\\n\\t//Modifiers\\r\\n\\r\\n\\tmodifier onlySupportedToken(address _token) {\\r\\n\\t\\trequire(_token == address(usdc), \\\"Unsupported token\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t//CONSTRUCTOR /////\\r\\n\\tconstructor(address _usdc) {\\r\\n\\t\\trequire(_usdc != address(0), \\\"Invalid USDC address\\\");\\r\\n\\t\\tusdc = _usdc;\\r\\n\\t}\\r\\n\\r\\n\\t//TARGET SAVE DOMAIN ~~~~\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Creates a new target savings goal\\r\\n\\t * @param _purpose The purpose of the savings goal\\r\\n\\t * @param _targetAmount The target amount to save\\r\\n\\t * @param _durationDays The duration of the savings period in days\\r\\n\\t */\\r\\n\\r\\n\\tfunction createTargetSavings(\\r\\n\\t\\tstring memory _purpose,\\r\\n\\t\\tuint256 _targetAmount,\\r\\n\\t\\tThriveUtils.LockPeriod _durationDays\\r\\n\\t) external {\\r\\n\\t\\trequire(_targetAmount > 0, \\\"Target amount must be greater than 0\\\");\\r\\n\\r\\n\\t\\tuint256 lockDuration = ThriveUtils.getLockDuration(_durationDays);\\r\\n\\r\\n\\t\\tuint256 newSavingsId = nextTargetSavingsId++;\\r\\n\\t\\tuint256 startTime = block.timestamp;\\r\\n\\t\\tuint256 endTime = startTime.add(lockDuration.mul(1 days));\\r\\n\\r\\n\\t\\ttargetSavings[newSavingsId] = ThriveUtils.TargetSavings({\\r\\n\\t\\t\\towner: msg.sender,\\r\\n\\t\\t\\tpurpose: _purpose,\\r\\n\\t\\t\\ttargetAmount: _targetAmount,\\r\\n\\t\\t\\tcurrentAmount: 0,\\r\\n\\t\\t\\tstartTime: startTime,\\r\\n\\t\\t\\tendTime: endTime,\\r\\n\\t\\t\\taccumulatedRewards: 0,\\r\\n\\t\\t\\tcompleted: false,\\r\\n\\t\\t\\tlastDepositTime: 0\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tuserTargetSavings[msg.sender].add(newSavingsId);\\r\\n\\t\\tallTargetSavings.add(newSavingsId);\\r\\n\\r\\n\\t\\temit TargetSavingsCreated(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_purpose,\\r\\n\\t\\t\\t_targetAmount,\\r\\n\\t\\t\\tstartTime,\\r\\n\\t\\t\\tendTime,\\r\\n\\t\\t\\tnewSavingsId\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addToTargetSavings(\\r\\n\\t\\tuint256 _savingsId,\\r\\n\\t\\tuint256 _amount\\r\\n\\t) external nonReentrant {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tuserTargetSavings[msg.sender].contains(_savingsId),\\r\\n\\t\\t\\t\\\"Target savings not found or not owned by user\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tThriveUtils.TargetSavings storage savings = targetSavings[_savingsId];\\r\\n\\r\\n\\t\\trequire(!savings.completed, \\\"Target savings already completed\\\");\\r\\n\\t\\trequire(block.timestamp < savings.endTime, \\\"Savings period has ended\\\");\\r\\n\\r\\n\\t\\tIERC20(usdc).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n\\t\\tuint256 newRewards = 0;\\r\\n\\t\\tif (savings.lastDepositTime != 0) {\\r\\n\\t\\t\\tnewRewards = _calculateRewardsForDeposit(\\r\\n\\t\\t\\t\\tsavings.currentAmount,\\r\\n\\t\\t\\t\\tsavings.lastDepositTime,\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsavings.accumulatedRewards = savings.accumulatedRewards.add(newRewards);\\r\\n\\t\\tsavings.currentAmount = savings.currentAmount.add(_amount);\\r\\n\\t\\tsavings.lastDepositTime = block.timestamp;\\r\\n\\r\\n\\t\\tif (savings.currentAmount >= savings.targetAmount) {\\r\\n\\t\\t\\tsavings.completed = true;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit TargetSavingsUpdated(_savingsId, _amount, savings.currentAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _calculateRewardsForDeposit(\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint256 _startTime,\\r\\n\\t\\tuint256 _endTime\\r\\n\\t) internal pure returns (uint256) {\\r\\n\\t\\tuint256 durationInSeconds = _endTime.sub(_startTime);\\r\\n\\t\\tuint256 annualRewardRate = AAVE_APY.mul(1e18).div(10000); // Convert basis points to a decimal, scaled by 1e18\\r\\n\\t\\tuint256 rewardRate = annualRewardRate.div(365 days);\\r\\n\\t\\tuint256 reward = _amount.mul(rewardRate).mul(durationInSeconds).div(\\r\\n\\t\\t\\t1e18\\r\\n\\t\\t);\\r\\n\\t\\treturn reward;\\r\\n\\t}\\r\\n\\r\\n\\t//withdraw the and delete target save\\r\\n\\r\\n\\tfunction completeTargetSavings(uint256 _savingsId) external nonReentrant {\\r\\n\\t\\tThriveUtils.TargetSavings storage savings = targetSavings[_savingsId];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tsavings.owner == msg.sender,\\r\\n\\t\\t\\t\\\"only owner can complete target saivngs\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tuserTargetSavings[msg.sender].contains(_savingsId),\\r\\n\\t\\t\\t\\\"Savings dosen't exists\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 amountToTransfer = savings.currentAmount;\\r\\n\\t\\tuint256 rewardsToTransfer = savings.accumulatedRewards;\\r\\n\\r\\n\\t\\tif (!savings.completed && block.timestamp < savings.endTime) {\\r\\n\\t\\t\\tuint256 earlyWithdrawalFee = amountToTransfer.mul(1200).div(10000); // 12% fee\\r\\n\\t\\t\\tamountToTransfer = amountToTransfer.sub(earlyWithdrawalFee);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// subtract 30% protocol fees on the rewards\\r\\n\\t\\tuint256 protocolRewardShare = rewardsToTransfer.mul(3000).div(10000);\\r\\n\\t\\trewardsToTransfer = rewardsToTransfer.sub(protocolRewardShare);\\r\\n\\r\\n\\t\\tIERC20(usdc).safeTransfer(\\r\\n\\t\\t\\tsavings.owner,\\r\\n\\t\\t\\tamountToTransfer.add(rewardsToTransfer)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Transfer protocol's share of rewards to fee\\r\\n\\r\\n\\t\\tuserTargetSavings[savings.owner].remove(_savingsId);\\r\\n\\t\\tallTargetSavings.remove(_savingsId);\\r\\n\\r\\n\\t\\t// delete targetSavings[_savingsId];\\r\\n\\r\\n\\t\\temit TargetSavingsCompleted(\\r\\n\\t\\t\\t_savingsId,\\r\\n\\t\\t\\tsavings.currentAmount,\\r\\n\\t\\t\\tsavings.accumulatedRewards\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t//SAVE LOCK DOMAIN~~~\\r\\n\\t/**\\r\\n\\t * @dev Creates a new save lock for the user\\r\\n\\t * @param _amount The amount of USDC to lock\\r\\n\\t * @param _lockPeriod The duration of the lock\\r\\n\\t */\\r\\n\\r\\n\\tfunction saveLockFunds(\\r\\n\\t\\taddress _token,\\r\\n\\t\\tstring memory _title,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tThriveUtils.LockPeriod _lockPeriod\\r\\n\\t) external nonReentrant onlySupportedToken(_token) {\\r\\n\\t\\trequire(_amount > 1e6, \\\"Amount must be greater than 1 USDC\\\");\\r\\n\\r\\n\\t\\tuint256 lockDuration = ThriveUtils.getLockDuration(_lockPeriod);\\r\\n\\t\\tuint256 newLockId = nextSaveLockId++;\\r\\n\\r\\n\\t\\t// Transfer USDC from user to contract\\r\\n\\t\\tIERC20(usdc).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n\\t\\t// Create new SaveLock\\r\\n\\t\\tsaveLocks[newLockId] = ThriveUtils.SaveLock({\\r\\n\\t\\t\\tid: newLockId,\\r\\n\\t\\t\\towner: msg.sender,\\r\\n\\t\\t\\tamount: _amount,\\r\\n\\t\\t\\twithdrawnAmount: 0,\\r\\n\\t\\t\\ttitle: _title,\\r\\n\\t\\t\\tlockDuration: lockDuration,\\r\\n\\t\\t\\tstartTime: block.timestamp,\\r\\n\\t\\t\\tlockToken: usdc,\\r\\n\\t\\t\\twithdrawn: false,\\r\\n\\t\\t\\taccumulatedRewards: 0\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\t// Add to user's active save locks and all active save locks\\r\\n\\t\\tuserActiveSaveLocks[msg.sender].add(newLockId);\\r\\n\\r\\n\\t\\tallActiveSaveLocks.add(newLockId);\\r\\n\\r\\n\\t\\temit SaveLockCreated(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\tusdc,\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\t_lockPeriod,\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tnewLockId\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Allows user to withdraw funds from a save lock\\r\\n\\t * @param _lockId The ID of the save lock to withdraw from\\r\\n\\t */\\r\\n\\r\\n\\tfunction withdrawLockedFunds(uint256 _lockId) external nonReentrant {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tuserActiveSaveLocks[msg.sender].contains(_lockId),\\r\\n\\t\\t\\t\\\"SaveLock not found or not owned by user\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tThriveUtils.SaveLock storage lock = saveLocks[_lockId];\\r\\n\\t\\trequire(lock.amount > 0, \\\"SaveLock already withdrawn\\\");\\r\\n\\r\\n\\t\\tuint256 lockEndTime = lock.startTime.add(lock.lockDuration);\\r\\n\\t\\tuint256 amountToTransfer = lock.amount;\\r\\n\\t\\tuint256 fee = 0;\\r\\n\\t\\tuint256 rewardAmount = 0;\\r\\n\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp >\\r\\n\\t\\t\\t\\tlock.startTime.add(lock.lockDuration.mul(60).div(100)),\\r\\n\\t\\t\\t\\\"Cannot withdraw before 60% of lock duration\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (block.timestamp < lockEndTime) {\\r\\n\\t\\t\\tfee = lock.amount.mul(EARLY_WITHDRAWAL_FEE_PERCENTAGE).div(10000);\\r\\n\\t\\t\\tamountToTransfer = lock.amount.sub(fee);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 daysLocked = lock.lockDuration.div(1 days);\\r\\n\\t\\t\\trewardAmount = calculateSaveLockReward(lock.amount, daysLocked);\\r\\n\\t\\t\\tuserUSDRewards[msg.sender] = userUSDRewards[msg.sender].add(\\r\\n\\t\\t\\t\\trewardAmount\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\tlock.accumulatedRewards = rewardAmount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlock.withdrawnAmount = amountToTransfer;\\r\\n\\t\\tlock.withdrawn = true;\\r\\n\\r\\n\\t\\t// Remove save lock from active sets\\r\\n\\t\\tuserActiveSaveLocks[msg.sender].remove(_lockId);\\r\\n\\t\\tallActiveSaveLocks.remove(_lockId);\\r\\n\\r\\n\\t\\t//add safe lock to inactiveset\\r\\n\\t\\tuserInActiveSaveLocks[msg.sender].add(_lockId);\\r\\n\\t\\tallInActiveSaveLocks.add(_lockId);\\r\\n\\r\\n\\t\\t// Transfer funds to user\\r\\n\\t\\tIERC20(usdc).safeTransfer(msg.sender, amountToTransfer);\\r\\n\\r\\n\\t\\temit FundsWithdrawn(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\tusdc,\\r\\n\\t\\t\\tamountToTransfer,\\r\\n\\t\\t\\trewardAmount,\\r\\n\\t\\t\\tfee,\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\t_lockId\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimSafeLockRewards() external nonReentrant {\\r\\n\\t\\tuint256 rewardsAmount = userUSDRewards[msg.sender];\\r\\n\\t\\trequire(rewardsAmount > 0, \\\"No rewards to claim\\\");\\r\\n\\r\\n\\t\\tuserUSDRewards[msg.sender] = 0;\\r\\n\\r\\n\\t\\tIERC20(usdc).safeTransfer(msg.sender, rewardsAmount);\\r\\n\\r\\n\\t\\temit SafeLockRewardsClaimed(msg.sender, rewardsAmount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Calculates the reward for a completed save lock\\r\\n\\t * @param amount The locked amount\\r\\n\\t * @param daysLocked The number of days the amount was locked\\r\\n\\t * @return The calculated reward amount\\r\\n\\t */\\r\\n\\tfunction calculateSaveLockReward(\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 daysLocked\\r\\n\\t) internal pure returns (uint256) {\\r\\n\\t\\tuint256 annualReward = amount.mul(AAVE_APY).div(10000);\\r\\n\\t\\tuint256 dailyReward = annualReward.div(DAYS_PER_YEAR);\\r\\n\\t\\treturn dailyReward.mul(daysLocked);\\r\\n\\t}\\r\\n\\r\\n\\t//GETHERS FUNCTIONS\\r\\n\\t// Save Lock Getter functions\\r\\n\\r\\n\\tfunction getUserActiveSaveLockIds(\\r\\n\\t\\taddress _user\\r\\n\\t) external view returns (uint256[] memory) {\\r\\n\\t\\treturn userActiveSaveLocks[_user].values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserInActiveSaveLockIds(\\r\\n\\t\\taddress _user\\r\\n\\t) external view returns (uint256[] memory) {\\r\\n\\t\\treturn userInActiveSaveLocks[_user].values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAllActiveSaveLockIds()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256[] memory)\\r\\n\\t{\\r\\n\\t\\treturn allActiveSaveLocks.values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAllInActiveSaveLockIds()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256[] memory)\\r\\n\\t{\\r\\n\\t\\treturn allInActiveSaveLocks.values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSaveLockDetails(\\r\\n\\t\\tuint256 _lockId\\r\\n\\t) external view returns (ThriveUtils.SaveLock memory) {\\r\\n\\t\\treturn saveLocks[_lockId];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUnclaimedSafeLockRewards(\\r\\n\\t\\taddress _user\\r\\n\\t) external view returns (uint256) {\\r\\n\\t\\treturn userUSDRewards[_user];\\r\\n\\t}\\r\\n\\r\\n\\t//target savings\\r\\n\\tfunction getUserActiveTargetSavingsIds(\\r\\n\\t\\taddress _user\\r\\n\\t) external view returns (uint256[] memory) {\\r\\n\\t\\treturn userTargetSavings[_user].values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAllTargetSavingsIds() external view returns (uint256[] memory) {\\r\\n\\t\\treturn allTargetSavings.values();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTargetSavingsDetails(\\r\\n\\t\\tuint256 _savingsId\\r\\n\\t) external view returns (ThriveUtils.TargetSavings memory) {\\r\\n\\t\\treturn targetSavings[_savingsId];\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3f7e19a1783c43b5a71543a63a49acc0ac0e76c837f30d50ecf5b44f615e2899\",\"license\":\"MIT\"},\"contracts/lib/thriveutils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary ThriveUtils {\\r\\n\\tstruct AutoSave {\\r\\n\\t\\tuint256 totalSavings;\\r\\n\\t\\taddress savingsCurrency;\\r\\n\\t\\tuint256 nextWithdrawalTime;\\r\\n\\t\\tuint256 frequency;\\r\\n\\t\\tuint256 autoSaveAmount;\\r\\n\\t}\\r\\n\\r\\n\\tenum LockPeriod {\\r\\n\\t\\tTwoMinutes,\\r\\n\\t\\tThreeMinutes,\\r\\n\\t\\tFiveMinutes,\\r\\n\\t\\tSevenMinutes,\\r\\n\\t\\tTenMinutes\\r\\n\\t}\\r\\n\\r\\n\\tstruct SaveLock {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\taddress owner;\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\tuint256 withdrawnAmount;\\r\\n\\t\\tstring title;\\r\\n\\t\\tuint256 lockDuration;\\r\\n\\t\\tuint256 startTime;\\r\\n\\t\\taddress lockToken;\\r\\n\\t\\tbool withdrawn;\\r\\n\\t\\tuint256 accumulatedRewards;\\r\\n\\t}\\r\\n\\r\\n\\tstruct TargetSavings {\\r\\n\\t\\taddress owner;\\r\\n\\t\\tstring purpose;\\r\\n\\t\\tuint256 targetAmount;\\r\\n\\t\\tuint256 currentAmount;\\r\\n\\t\\tuint256 startTime;\\r\\n\\t\\tuint256 endTime;\\r\\n\\t\\tbool completed;\\r\\n\\t\\tuint256 accumulatedRewards;\\r\\n\\t\\tuint256 lastDepositTime;\\r\\n\\t}\\r\\n\\r\\n\\t// Constants for lock durations\\r\\n\\r\\n\\tuint256 constant TWO_MINUTES = 2 minutes;\\r\\n\\tuint256 constant THREE_MINUTES = 3 minutes;\\r\\n\\tuint256 constant FIVE_MINUTES = 5 minutes;\\r\\n\\tuint256 constant SEVEN_MINUTES = 7 minutes;\\r\\n\\tuint256 constant TEN_MINUTES = 10 minutes;\\r\\n\\r\\n\\tfunction getLockDuration(\\r\\n\\t\\tLockPeriod _lockPeriod\\r\\n\\t) internal pure returns (uint256) {\\r\\n\\t\\tif (_lockPeriod == LockPeriod.TwoMinutes) {\\r\\n\\t\\t\\treturn TWO_MINUTES;\\r\\n\\t\\t} else if (_lockPeriod == LockPeriod.ThreeMinutes) {\\r\\n\\t\\t\\treturn THREE_MINUTES;\\r\\n\\t\\t} else if (_lockPeriod == LockPeriod.FiveMinutes) {\\r\\n\\t\\t\\treturn FIVE_MINUTES;\\r\\n\\t\\t} else if (_lockPeriod == LockPeriod.SevenMinutes) {\\r\\n\\t\\t\\treturn SEVEN_MINUTES;\\r\\n\\t\\t} else if (_lockPeriod == LockPeriod.TenMinutes) {\\r\\n\\t\\t\\treturn TEN_MINUTES;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trevert(\\\"Invalid lock period\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xbfc6533cf67f44a57b93af3d6cb821c8602ad1faa966f0b01a84c6786f51a2b7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016008556001600d553480156200001b57600080fd5b50604051620025c9380380620025c98339810160408190526200003e91620000b0565b60016000556001600160a01b0381166200009e5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420555344432061646472657373000000000000000000000000604482015260640160405180910390fd5b6001600160a01b0316608052620000e2565b600060208284031215620000c357600080fd5b81516001600160a01b0381168114620000db57600080fd5b9392505050565b60805161248c6200013d600039600081816101a8015281816105ba0152818161063601528181610739015281816107a5015281816108b101528181610b8401528181610edb01528181610f2801526110f1015261248c6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063b72f50ba116100c3578063e2683cb21161007c578063e2683cb214610303578063ead5232514610316578063eced55261461031e578063f1aa23871461032d578063f5fa268214610356578063fd66d1461461036957600080fd5b8063b72f50ba1461028c578063b806d84e146102ac578063c6846ef8146102bf578063cd28216e146102c8578063d2c2594e146102db578063df97fff5146102e357600080fd5b80634dc46734116101155780634dc46734146101ec5780634f29200c146101ff5780636fcfe43a146102155780637ae7637f1461023d5780637c7e09f114610266578063b10890b81461027957600080fd5b80632545a8ac14610152578063264292a21461017b578063307327231461019b5780633e413bee146101a357806341f5d08c146101e2575b600080fd5b610165610160366004611e06565b610372565b6040516101729190611e77565b60405180910390f35b61018e610189366004611f3e565b610509565b6040516101729190611f59565b61018e610533565b6101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610172565b6101ea610544565b005b6101ea6101fa36600461204f565b61062b565b61020760c881565b604051908152602001610172565b610228610223366004611e06565b610931565b604051610172999897969594939291906120b7565b61020761024b366004611f3e565b6001600160a01b03166000908152600e602052604090205490565b6101ea610274366004611e06565b610a11565b6101ea610287366004611e06565b610c37565b61020761029a366004611f3e565b600e6020526000908152604090205481565b61018e6102ba366004611f3e565b610f87565b61020761016d81565b6101ea6102d6366004612117565b610fab565b61018e6111de565b6102f66102f1366004611e06565b6111ea565b6040516101729190612139565b61018e610311366004611f3e565b611355565b61018e611379565b610207670de0b6b3a764000081565b61034061033b366004611e06565b611385565b6040516101729a999897969594939291906121cf565b6101ea610364366004612235565b611478565b6102076103e881565b6103dc6040518061014001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600081525090565b60008281526001602081815260409283902083516101408101855281548152928101546001600160a01b0316918301919091526002810154928201929092526003820154606082015260048201805491929160808401919061043d9061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546104699061228c565b80156104b65780601f1061048b576101008083540402835291602001916104b6565b820191906000526020600020905b81548152906001019060200180831161049957829003601f168201915b5050509183525050600582015460208201526006820154604082015260078201546001600160a01b0381166060830152600160a01b900460ff161515608082015260089091015460a09091015292915050565b6001600160a01b038116600090815260036020526040902060609061052d90611669565b92915050565b606061053f600b611669565b905090565b61054c61167d565b336000908152600e6020526040902054806105a45760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064015b60405180910390fd5b336000818152600e60205260408120556105e9907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690836116d7565b60405181815233907f15fd31649537a49605493d3236bc7a69d867fdf946fd995ca32decb813ea15659060200160405180910390a2506106296001600055565b565b61063361167d565b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106a95760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b604482015260640161059b565b620f424083116107065760405162461bcd60e51b815260206004820152602260248201527f416d6f756e74206d7573742062652067726561746572207468616e2031205553604482015261444360f01b606482015260840161059b565b60006107118361173f565b600880549192506000919082610726836122dd565b9091555090506107616001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088611830565b6040805161014081018252828152336020808301918252828401898152600060608501818152608086018d815260a087018a90524260c08801526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660e08901526101008801849052610120880184905289845260018087529890932087518155955197860180546001600160a01b031916989093169790971790915590516002840155516003830155925180519293919261082c9260048501920190611d6d565b5060a0820151600582015560c0820151600682015560e08201516007820180546101008501511515600160a01b026001600160a81b03199091166001600160a01b0390931692909217919091179055610120909101516008909101553360009081526002602052604090206108a19082611868565b506108ad600482611868565b50807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03167fbeb49c3989de3f59c1e3fdf2cfbc0595322204cd090cc9063d29c0a51a76c9dc8888426040516109169392919061230e565b60405180910390a450505061092b6001600055565b50505050565b600960205260009081526040902080546001820180546001600160a01b03909216929161095d9061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546109899061228c565b80156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b505050600284015460038501546004860154600587015460068801546007890154600890990154979894979396509194509260ff9091169189565b610a1961167d565b600081815260096020526040902080546001600160a01b03163314610a8f5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c79206f776e65722063616e20636f6d706c6574652074617267657420736044820152656169766e677360d01b606482015260840161059b565b336000908152600a60205260409020610aa89083611874565b610aed5760405162461bcd60e51b8152602060048201526016602482015275536176696e677320646f73656e27742065786973747360501b604482015260640161059b565b60038101546007820154600683015460ff16158015610b0f5750826005015442105b15610b3e576000610b2e612710610b28856104b061188c565b90611898565b9050610b3a83826118a4565b9250505b6000610b52612710610b2884610bb861188c565b9050610b5e82826118a4565b8454909250610bab906001600160a01b0316610b7a85856118b0565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906116d7565b83546001600160a01b03166000908152600a60205260409020610bce90866118bc565b50610bda600b866118bc565b50847f4999d11e8192fc0e0b3c0aea8b3e23da4d3b62dcd9944075a1ce479dd3e4ee5785600301548660070154604051610c1e929190918252602082015260400190565b60405180910390a250505050610c346001600055565b50565b610c3f61167d565b336000908152600260205260409020610c589082611874565b610cb45760405162461bcd60e51b815260206004820152602760248201527f536176654c6f636b206e6f7420666f756e64206f72206e6f74206f776e656420604482015266313c903ab9b2b960c91b606482015260840161059b565b60008181526001602052604090206002810154610d135760405162461bcd60e51b815260206004820152601a60248201527f536176654c6f636b20616c72656164792077697468647261776e000000000000604482015260640161059b565b6000610d30826005015483600601546118b090919063ffffffff16565b9050600082600201549050600080610d69610d5e6064610b28603c896005015461188c90919063ffffffff16565b6006870154906118b0565b4211610dcb5760405162461bcd60e51b815260206004820152602b60248201527f43616e6e6f74207769746864726177206265666f726520363025206f66206c6f60448201526a31b590323ab930ba34b7b760a91b606482015260840161059b565b83421015610e0b57610df2612710610b286103e8886002015461188c90919063ffffffff16565b6002860154909250610e0490836118a4565b9250610e66565b6005850154600090610e209062015180611898565b9050610e308660020154826118c8565b336000908152600e6020526040902054909250610e4d90836118b0565b336000908152600e602052604090205550600885018190555b6003850183905560078501805460ff60a01b1916600160a01b179055336000908152600260205260409020610e9b90876118bc565b50610ea76004876118bc565b50336000908152600360205260409020610ec19087611868565b50610ecd600687611868565b50610f026001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856116d7565b604080518481526020810183905290810183905242606082015286906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907f0e0e9ed4e57df461866832664c482fa4aa524b2e378b03044993a565ff296c899060800160405180910390a45050505050610c346001600055565b6001600160a01b0381166000908152600a6020526040902060609061052d90611669565b610fb361167d565b336000908152600a60205260409020610fcc9083611874565b61102e5760405162461bcd60e51b815260206004820152602d60248201527f54617267657420736176696e6773206e6f7420666f756e64206f72206e6f742060448201526c37bbb732b210313c903ab9b2b960991b606482015260840161059b565b6000828152600960205260409020600681015460ff16156110915760405162461bcd60e51b815260206004820181905260248201527f54617267657420736176696e677320616c726561647920636f6d706c65746564604482015260640161059b565b806005015442106110e45760405162461bcd60e51b815260206004820152601860248201527f536176696e677320706572696f642068617320656e6465640000000000000000604482015260640161059b565b6111196001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611830565b6000816008015460001461113d5761113a8260030154836008015442611901565b90505b600782015461114c90826118b0565b6007830155600382015461116090846118b0565b600383018190554260088401556002830154116111875760068201805460ff191660011790555b837f80392777d6ef17b2e7ac58537936c32b1f3ef98b7f995cb4429ffbdb607103ad8484600301546040516111c6929190918252602082015260400190565b60405180910390a250506111da6001600055565b5050565b606061053f6006611669565b61124460405180610120016040528060006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6000828152600960209081526040918290208251610120810190935280546001600160a01b0316835260018101805491928401916112819061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546112ad9061228c565b80156112fa5780601f106112cf576101008083540402835291602001916112fa565b820191906000526020600020905b8154815290600101906020018083116112dd57829003601f168201915b505050918352505060028201546020820152600382015460408201526004820154606082015260058201546080820152600682015460ff16151560a0820152600782015460c082015260089091015460e09091015292915050565b6001600160a01b038116600090815260026020526040902060609061052d90611669565b606061053f6004611669565b6001602081905260009182526040909120805491810154600282015460038301546004840180546001600160a01b039094169492939192916113c69061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546113f29061228c565b801561143f5780601f106114145761010080835404028352916020019161143f565b820191906000526020600020905b81548152906001019060200180831161142257829003601f168201915b50505050600583015460068401546007850154600890950154939491939092506001600160a01b03821691600160a01b900460ff16908a565b600082116114d45760405162461bcd60e51b8152602060048201526024808201527f54617267657420616d6f756e74206d75737420626520677265617465722074686044820152630616e20360e41b606482015260840161059b565b60006114df8261173f565b600d805491925060009190826114f4836122dd565b90915550905042600061151461150d856201518061188c565b83906118b0565b604080516101208101825233815260208082018b81528284018b90526000606084018190526080840188905260a0840186905260c0840181905260e0840181905261010084018190528881526009835293909320825181546001600160a01b0319166001600160a01b0390911617815592518051949550919361159d9260018501920190611d6d565b506040828101516002830155606083015160038301556080830151600483015560a0830151600583015560c083015160068301805460ff191691151591909117905560e0830151600783015561010090920151600890910155336000908152600a6020522061160c9084611868565b50611618600b84611868565b508282336001600160a01b03167f738d392d25f3eb6f9cc29497d6e6465cb891dc67cd330f1305b3535447bbc2b58a8a8660405161165893929190612344565b60405180910390a450505050505050565b606060006116768361196d565b9392505050565b600260005414156116d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161059b565b6002600055565b6040516001600160a01b03831660248201526044810182905261173a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c9565b505050565b600080826004811115611754576117546122f8565b141561176257506078919050565b6001826004811115611776576117766122f8565b1415611784575060b4919050565b6002826004811115611798576117986122f8565b14156117a7575061012c919050565b60038260048111156117bb576117bb6122f8565b14156117ca57506101a4919050565b60048260048111156117de576117de6122f8565b14156117ed5750610258919050565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b1bd8dac81c195c9a5bd9606a1b604482015260640161059b565b919050565b6040516001600160a01b038085166024830152831660448201526064810182905261092b9085906323b872dd60e01b90608401611703565b60006116768383611a9e565b60008181526001830160205260408120541515611676565b60006116768284612369565b60006116768284612388565b600061167682846123aa565b600061167682846123c1565b60006116768383611aed565b6000806118dc612710610b288660c861188c565b905060006118ec8261016d611898565b90506118f8818561188c565b95945050505050565b60008061190e83856118a4565b9050600061192b612710610b2860c8670de0b6b3a764000061188c565b9050600061193d826301e13380611898565b90506000611961670de0b6b3a7640000610b288661195b8c8761188c565b9061188c565b98975050505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156119bd57602002820191906000526020600020905b8154815260200190600101908083116119a9575b50505050509050919050565b6000611a1e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611be09092919063ffffffff16565b9050805160001480611a3f575080806020019051810190611a3f91906123d9565b61173a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059b565b6000818152600183016020526040812054611ae55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561052d565b50600061052d565b60008181526001830160205260408120548015611bd6576000611b116001836123aa565b8554909150600090611b25906001906123aa565b9050818114611b8a576000866000018281548110611b4557611b456123fb565b9060005260206000200154905080876000018481548110611b6857611b686123fb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b9b57611b9b612411565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061052d565b600091505061052d565b6060611bef8484600085611bf7565b949350505050565b606082471015611c585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059b565b600080866001600160a01b03168587604051611c749190612427565b60006040518083038185875af1925050503d8060008114611cb1576040519150601f19603f3d011682016040523d82523d6000602084013e611cb6565b606091505b5091509150611cc787838387611cd2565b979650505050505050565b60608315611d3e578251611d37576001600160a01b0385163b611d375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059b565b5081611bef565b611bef8383815115611d535781518083602001fd5b8060405162461bcd60e51b815260040161059b9190612443565b828054611d799061228c565b90600052602060002090601f016020900481019282611d9b5760008555611de1565b82601f10611db457805160ff1916838001178555611de1565b82800160010185558215611de1579182015b82811115611de1578251825591602001919060010190611dc6565b50611ded929150611df1565b5090565b5b80821115611ded5760008155600101611df2565b600060208284031215611e1857600080fd5b5035919050565b60005b83811015611e3a578181015183820152602001611e22565b8381111561092b5750506000910152565b60008151808452611e63816020860160208601611e1f565b601f01601f19169290920160200192915050565b602081528151602082015260006020830151611e9e60408401826001600160a01b03169052565b50604083015160608301526060830151608083015260808301516101408060a0850152611ecf610160850183611e4b565b915060a085015160c085015260c085015160e085015260e0850151610100611f01818701836001600160a01b03169052565b8601519050610120611f168682018315159052565b959095015193019290925250919050565b80356001600160a01b038116811461182b57600080fd5b600060208284031215611f5057600080fd5b61167682611f27565b6020808252825182820181905260009190848201906040850190845b81811015611f9157835183529284019291840191600101611f75565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611fc457600080fd5b813567ffffffffffffffff80821115611fdf57611fdf611f9d565b604051601f8301601f19908116603f0116810190828211818310171561200757612007611f9d565b8160405283815286602085880101111561202057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356005811061182b57600080fd5b6000806000806080858703121561206557600080fd5b61206e85611f27565b9350602085013567ffffffffffffffff81111561208a57600080fd5b61209687828801611fb3565b935050604085013591506120ac60608601612040565b905092959194509250565b6001600160a01b038a168152610120602082018190526000906120dc8382018c611e4b565b604084019a909a5250506060810196909652608086019490945260a0850192909252151560c084015260e08301526101009091015292915050565b6000806040838503121561212a57600080fd5b50508035926020909101359150565b602081526121536020820183516001600160a01b03169052565b60006020830151610120806040850152612171610140850183611e4b565b91506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c08501516121ae60e086018215159052565b5060e085015161010085810191909152909401519390920192909252919050565b60006101408c835260018060a01b03808d1660208501528b60408501528a60608501528160808501526122048285018b611e4b565b60a085019990995260c084019790975250509290931660e08301521515610100820152610120015295945050505050565b60008060006060848603121561224a57600080fd5b833567ffffffffffffffff81111561226157600080fd5b61226d86828701611fb3565b9350506020840135915061228360408501612040565b90509250925092565b600181811c908216806122a057607f821691505b602082108114156122c157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156122f1576122f16122c7565b5060010190565b634e487b7160e01b600052602160045260246000fd5b838152606081016005841061233357634e487b7160e01b600052602160045260246000fd5b602082019390935260400152919050565b6060815260006123576060830186611e4b565b60208301949094525060400152919050565b6000816000190483118215151615612383576123836122c7565b500290565b6000826123a557634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156123bc576123bc6122c7565b500390565b600082198211156123d4576123d46122c7565b500190565b6000602082840312156123eb57600080fd5b8151801515811461167657600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008251612439818460208701611e1f565b9190910192915050565b6020815260006116766020830184611e4b56fea264697066735822122088e6e321ccce15efee83201e105c8f871b949d291c33b283b69efa3420e5451264736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063b72f50ba116100c3578063e2683cb21161007c578063e2683cb214610303578063ead5232514610316578063eced55261461031e578063f1aa23871461032d578063f5fa268214610356578063fd66d1461461036957600080fd5b8063b72f50ba1461028c578063b806d84e146102ac578063c6846ef8146102bf578063cd28216e146102c8578063d2c2594e146102db578063df97fff5146102e357600080fd5b80634dc46734116101155780634dc46734146101ec5780634f29200c146101ff5780636fcfe43a146102155780637ae7637f1461023d5780637c7e09f114610266578063b10890b81461027957600080fd5b80632545a8ac14610152578063264292a21461017b578063307327231461019b5780633e413bee146101a357806341f5d08c146101e2575b600080fd5b610165610160366004611e06565b610372565b6040516101729190611e77565b60405180910390f35b61018e610189366004611f3e565b610509565b6040516101729190611f59565b61018e610533565b6101ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610172565b6101ea610544565b005b6101ea6101fa36600461204f565b61062b565b61020760c881565b604051908152602001610172565b610228610223366004611e06565b610931565b604051610172999897969594939291906120b7565b61020761024b366004611f3e565b6001600160a01b03166000908152600e602052604090205490565b6101ea610274366004611e06565b610a11565b6101ea610287366004611e06565b610c37565b61020761029a366004611f3e565b600e6020526000908152604090205481565b61018e6102ba366004611f3e565b610f87565b61020761016d81565b6101ea6102d6366004612117565b610fab565b61018e6111de565b6102f66102f1366004611e06565b6111ea565b6040516101729190612139565b61018e610311366004611f3e565b611355565b61018e611379565b610207670de0b6b3a764000081565b61034061033b366004611e06565b611385565b6040516101729a999897969594939291906121cf565b6101ea610364366004612235565b611478565b6102076103e881565b6103dc6040518061014001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160608152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600081525090565b60008281526001602081815260409283902083516101408101855281548152928101546001600160a01b0316918301919091526002810154928201929092526003820154606082015260048201805491929160808401919061043d9061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546104699061228c565b80156104b65780601f1061048b576101008083540402835291602001916104b6565b820191906000526020600020905b81548152906001019060200180831161049957829003601f168201915b5050509183525050600582015460208201526006820154604082015260078201546001600160a01b0381166060830152600160a01b900460ff161515608082015260089091015460a09091015292915050565b6001600160a01b038116600090815260036020526040902060609061052d90611669565b92915050565b606061053f600b611669565b905090565b61054c61167d565b336000908152600e6020526040902054806105a45760405162461bcd60e51b81526020600482015260136024820152724e6f207265776172647320746f20636c61696d60681b60448201526064015b60405180910390fd5b336000818152600e60205260408120556105e9907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690836116d7565b60405181815233907f15fd31649537a49605493d3236bc7a69d867fdf946fd995ca32decb813ea15659060200160405180910390a2506106296001600055565b565b61063361167d565b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146106a95760405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b604482015260640161059b565b620f424083116107065760405162461bcd60e51b815260206004820152602260248201527f416d6f756e74206d7573742062652067726561746572207468616e2031205553604482015261444360f01b606482015260840161059b565b60006107118361173f565b600880549192506000919082610726836122dd565b9091555090506107616001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088611830565b6040805161014081018252828152336020808301918252828401898152600060608501818152608086018d815260a087018a90524260c08801526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660e08901526101008801849052610120880184905289845260018087529890932087518155955197860180546001600160a01b031916989093169790971790915590516002840155516003830155925180519293919261082c9260048501920190611d6d565b5060a0820151600582015560c0820151600682015560e08201516007820180546101008501511515600160a01b026001600160a81b03199091166001600160a01b0390931692909217919091179055610120909101516008909101553360009081526002602052604090206108a19082611868565b506108ad600482611868565b50807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316336001600160a01b03167fbeb49c3989de3f59c1e3fdf2cfbc0595322204cd090cc9063d29c0a51a76c9dc8888426040516109169392919061230e565b60405180910390a450505061092b6001600055565b50505050565b600960205260009081526040902080546001820180546001600160a01b03909216929161095d9061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546109899061228c565b80156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b505050600284015460038501546004860154600587015460068801546007890154600890990154979894979396509194509260ff9091169189565b610a1961167d565b600081815260096020526040902080546001600160a01b03163314610a8f5760405162461bcd60e51b815260206004820152602660248201527f6f6e6c79206f776e65722063616e20636f6d706c6574652074617267657420736044820152656169766e677360d01b606482015260840161059b565b336000908152600a60205260409020610aa89083611874565b610aed5760405162461bcd60e51b8152602060048201526016602482015275536176696e677320646f73656e27742065786973747360501b604482015260640161059b565b60038101546007820154600683015460ff16158015610b0f5750826005015442105b15610b3e576000610b2e612710610b28856104b061188c565b90611898565b9050610b3a83826118a4565b9250505b6000610b52612710610b2884610bb861188c565b9050610b5e82826118a4565b8454909250610bab906001600160a01b0316610b7a85856118b0565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906116d7565b83546001600160a01b03166000908152600a60205260409020610bce90866118bc565b50610bda600b866118bc565b50847f4999d11e8192fc0e0b3c0aea8b3e23da4d3b62dcd9944075a1ce479dd3e4ee5785600301548660070154604051610c1e929190918252602082015260400190565b60405180910390a250505050610c346001600055565b50565b610c3f61167d565b336000908152600260205260409020610c589082611874565b610cb45760405162461bcd60e51b815260206004820152602760248201527f536176654c6f636b206e6f7420666f756e64206f72206e6f74206f776e656420604482015266313c903ab9b2b960c91b606482015260840161059b565b60008181526001602052604090206002810154610d135760405162461bcd60e51b815260206004820152601a60248201527f536176654c6f636b20616c72656164792077697468647261776e000000000000604482015260640161059b565b6000610d30826005015483600601546118b090919063ffffffff16565b9050600082600201549050600080610d69610d5e6064610b28603c896005015461188c90919063ffffffff16565b6006870154906118b0565b4211610dcb5760405162461bcd60e51b815260206004820152602b60248201527f43616e6e6f74207769746864726177206265666f726520363025206f66206c6f60448201526a31b590323ab930ba34b7b760a91b606482015260840161059b565b83421015610e0b57610df2612710610b286103e8886002015461188c90919063ffffffff16565b6002860154909250610e0490836118a4565b9250610e66565b6005850154600090610e209062015180611898565b9050610e308660020154826118c8565b336000908152600e6020526040902054909250610e4d90836118b0565b336000908152600e602052604090205550600885018190555b6003850183905560078501805460ff60a01b1916600160a01b179055336000908152600260205260409020610e9b90876118bc565b50610ea76004876118bc565b50336000908152600360205260409020610ec19087611868565b50610ecd600687611868565b50610f026001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856116d7565b604080518481526020810183905290810183905242606082015286906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907f0e0e9ed4e57df461866832664c482fa4aa524b2e378b03044993a565ff296c899060800160405180910390a45050505050610c346001600055565b6001600160a01b0381166000908152600a6020526040902060609061052d90611669565b610fb361167d565b336000908152600a60205260409020610fcc9083611874565b61102e5760405162461bcd60e51b815260206004820152602d60248201527f54617267657420736176696e6773206e6f7420666f756e64206f72206e6f742060448201526c37bbb732b210313c903ab9b2b960991b606482015260840161059b565b6000828152600960205260409020600681015460ff16156110915760405162461bcd60e51b815260206004820181905260248201527f54617267657420736176696e677320616c726561647920636f6d706c65746564604482015260640161059b565b806005015442106110e45760405162461bcd60e51b815260206004820152601860248201527f536176696e677320706572696f642068617320656e6465640000000000000000604482015260640161059b565b6111196001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611830565b6000816008015460001461113d5761113a8260030154836008015442611901565b90505b600782015461114c90826118b0565b6007830155600382015461116090846118b0565b600383018190554260088401556002830154116111875760068201805460ff191660011790555b837f80392777d6ef17b2e7ac58537936c32b1f3ef98b7f995cb4429ffbdb607103ad8484600301546040516111c6929190918252602082015260400190565b60405180910390a250506111da6001600055565b5050565b606061053f6006611669565b61124460405180610120016040528060006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6000828152600960209081526040918290208251610120810190935280546001600160a01b0316835260018101805491928401916112819061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546112ad9061228c565b80156112fa5780601f106112cf576101008083540402835291602001916112fa565b820191906000526020600020905b8154815290600101906020018083116112dd57829003601f168201915b505050918352505060028201546020820152600382015460408201526004820154606082015260058201546080820152600682015460ff16151560a0820152600782015460c082015260089091015460e09091015292915050565b6001600160a01b038116600090815260026020526040902060609061052d90611669565b606061053f6004611669565b6001602081905260009182526040909120805491810154600282015460038301546004840180546001600160a01b039094169492939192916113c69061228c565b80601f01602080910402602001604051908101604052809291908181526020018280546113f29061228c565b801561143f5780601f106114145761010080835404028352916020019161143f565b820191906000526020600020905b81548152906001019060200180831161142257829003601f168201915b50505050600583015460068401546007850154600890950154939491939092506001600160a01b03821691600160a01b900460ff16908a565b600082116114d45760405162461bcd60e51b8152602060048201526024808201527f54617267657420616d6f756e74206d75737420626520677265617465722074686044820152630616e20360e41b606482015260840161059b565b60006114df8261173f565b600d805491925060009190826114f4836122dd565b90915550905042600061151461150d856201518061188c565b83906118b0565b604080516101208101825233815260208082018b81528284018b90526000606084018190526080840188905260a0840186905260c0840181905260e0840181905261010084018190528881526009835293909320825181546001600160a01b0319166001600160a01b0390911617815592518051949550919361159d9260018501920190611d6d565b506040828101516002830155606083015160038301556080830151600483015560a0830151600583015560c083015160068301805460ff191691151591909117905560e0830151600783015561010090920151600890910155336000908152600a6020522061160c9084611868565b50611618600b84611868565b508282336001600160a01b03167f738d392d25f3eb6f9cc29497d6e6465cb891dc67cd330f1305b3535447bbc2b58a8a8660405161165893929190612344565b60405180910390a450505050505050565b606060006116768361196d565b9392505050565b600260005414156116d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161059b565b6002600055565b6040516001600160a01b03831660248201526044810182905261173a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119c9565b505050565b600080826004811115611754576117546122f8565b141561176257506078919050565b6001826004811115611776576117766122f8565b1415611784575060b4919050565b6002826004811115611798576117986122f8565b14156117a7575061012c919050565b60038260048111156117bb576117bb6122f8565b14156117ca57506101a4919050565b60048260048111156117de576117de6122f8565b14156117ed5750610258919050565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081b1bd8dac81c195c9a5bd9606a1b604482015260640161059b565b919050565b6040516001600160a01b038085166024830152831660448201526064810182905261092b9085906323b872dd60e01b90608401611703565b60006116768383611a9e565b60008181526001830160205260408120541515611676565b60006116768284612369565b60006116768284612388565b600061167682846123aa565b600061167682846123c1565b60006116768383611aed565b6000806118dc612710610b288660c861188c565b905060006118ec8261016d611898565b90506118f8818561188c565b95945050505050565b60008061190e83856118a4565b9050600061192b612710610b2860c8670de0b6b3a764000061188c565b9050600061193d826301e13380611898565b90506000611961670de0b6b3a7640000610b288661195b8c8761188c565b9061188c565b98975050505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156119bd57602002820191906000526020600020905b8154815260200190600101908083116119a9575b50505050509050919050565b6000611a1e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611be09092919063ffffffff16565b9050805160001480611a3f575080806020019051810190611a3f91906123d9565b61173a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059b565b6000818152600183016020526040812054611ae55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561052d565b50600061052d565b60008181526001830160205260408120548015611bd6576000611b116001836123aa565b8554909150600090611b25906001906123aa565b9050818114611b8a576000866000018281548110611b4557611b456123fb565b9060005260206000200154905080876000018481548110611b6857611b686123fb565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b9b57611b9b612411565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061052d565b600091505061052d565b6060611bef8484600085611bf7565b949350505050565b606082471015611c585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059b565b600080866001600160a01b03168587604051611c749190612427565b60006040518083038185875af1925050503d8060008114611cb1576040519150601f19603f3d011682016040523d82523d6000602084013e611cb6565b606091505b5091509150611cc787838387611cd2565b979650505050505050565b60608315611d3e578251611d37576001600160a01b0385163b611d375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059b565b5081611bef565b611bef8383815115611d535781518083602001fd5b8060405162461bcd60e51b815260040161059b9190612443565b828054611d799061228c565b90600052602060002090601f016020900481019282611d9b5760008555611de1565b82601f10611db457805160ff1916838001178555611de1565b82800160010185558215611de1579182015b82811115611de1578251825591602001919060010190611dc6565b50611ded929150611df1565b5090565b5b80821115611ded5760008155600101611df2565b600060208284031215611e1857600080fd5b5035919050565b60005b83811015611e3a578181015183820152602001611e22565b8381111561092b5750506000910152565b60008151808452611e63816020860160208601611e1f565b601f01601f19169290920160200192915050565b602081528151602082015260006020830151611e9e60408401826001600160a01b03169052565b50604083015160608301526060830151608083015260808301516101408060a0850152611ecf610160850183611e4b565b915060a085015160c085015260c085015160e085015260e0850151610100611f01818701836001600160a01b03169052565b8601519050610120611f168682018315159052565b959095015193019290925250919050565b80356001600160a01b038116811461182b57600080fd5b600060208284031215611f5057600080fd5b61167682611f27565b6020808252825182820181905260009190848201906040850190845b81811015611f9157835183529284019291840191600101611f75565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611fc457600080fd5b813567ffffffffffffffff80821115611fdf57611fdf611f9d565b604051601f8301601f19908116603f0116810190828211818310171561200757612007611f9d565b8160405283815286602085880101111561202057600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356005811061182b57600080fd5b6000806000806080858703121561206557600080fd5b61206e85611f27565b9350602085013567ffffffffffffffff81111561208a57600080fd5b61209687828801611fb3565b935050604085013591506120ac60608601612040565b905092959194509250565b6001600160a01b038a168152610120602082018190526000906120dc8382018c611e4b565b604084019a909a5250506060810196909652608086019490945260a0850192909252151560c084015260e08301526101009091015292915050565b6000806040838503121561212a57600080fd5b50508035926020909101359150565b602081526121536020820183516001600160a01b03169052565b60006020830151610120806040850152612171610140850183611e4b565b91506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c08501516121ae60e086018215159052565b5060e085015161010085810191909152909401519390920192909252919050565b60006101408c835260018060a01b03808d1660208501528b60408501528a60608501528160808501526122048285018b611e4b565b60a085019990995260c084019790975250509290931660e08301521515610100820152610120015295945050505050565b60008060006060848603121561224a57600080fd5b833567ffffffffffffffff81111561226157600080fd5b61226d86828701611fb3565b9350506020840135915061228360408501612040565b90509250925092565b600181811c908216806122a057607f821691505b602082108114156122c157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156122f1576122f16122c7565b5060010190565b634e487b7160e01b600052602160045260246000fd5b838152606081016005841061233357634e487b7160e01b600052602160045260246000fd5b602082019390935260400152919050565b6060815260006123576060830186611e4b565b60208301949094525060400152919050565b6000816000190483118215151615612383576123836122c7565b500290565b6000826123a557634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156123bc576123bc6122c7565b500390565b600082198211156123d4576123d46122c7565b500190565b6000602082840312156123eb57600080fd5b8151801515811461167657600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008251612439818460208701611e1f565b9190910192915050565b6020815260006116766020830184611e4b56fea264697066735822122088e6e321ccce15efee83201e105c8f871b949d291c33b283b69efa3420e5451264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createTargetSavings(string,uint256,uint8)": {
        "details": "Creates a new target savings goal",
        "params": {
          "_durationDays": "The duration of the savings period in days",
          "_purpose": "The purpose of the savings goal",
          "_targetAmount": "The target amount to save"
        }
      },
      "saveLockFunds(address,string,uint256,uint8)": {
        "details": "Creates a new save lock for the user",
        "params": {
          "_amount": "The amount of USDC to lock",
          "_lockPeriod": "The duration of the lock"
        }
      },
      "withdrawLockedFunds(uint256)": {
        "details": "Allows user to withdraw funds from a save lock",
        "params": {
          "_lockId": "The ID of the save lock to withdraw from"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1875,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "saveLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(SaveLock)2937_storage)"
      },
      {
        "astId": 1880,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "userActiveSaveLocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UintSet)1704_storage)"
      },
      {
        "astId": 1885,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "userInActiveSaveLocks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UintSet)1704_storage)"
      },
      {
        "astId": 1888,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "allActiveSaveLocks",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(UintSet)1704_storage"
      },
      {
        "astId": 1891,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "allInActiveSaveLocks",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(UintSet)1704_storage"
      },
      {
        "astId": 1894,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "nextSaveLockId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1899,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "targetSavings",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(TargetSavings)2956_storage)"
      },
      {
        "astId": 1904,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "userTargetSavings",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(UintSet)1704_storage)"
      },
      {
        "astId": 1907,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "allTargetSavings",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(UintSet)1704_storage"
      },
      {
        "astId": 1910,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "nextTargetSavingsId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1914,
        "contract": "contracts/Thrive.sol:Thrive",
        "label": "userUSDRewards",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UintSet)1704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1704_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(SaveLock)2937_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ThriveUtils.SaveLock)",
        "numberOfBytes": "32",
        "value": "t_struct(SaveLock)2937_storage"
      },
      "t_mapping(t_uint256,t_struct(TargetSavings)2956_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ThriveUtils.TargetSavings)",
        "numberOfBytes": "32",
        "value": "t_struct(TargetSavings)2956_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SaveLock)2937_storage": {
        "encoding": "inplace",
        "label": "struct ThriveUtils.SaveLock",
        "members": [
          {
            "astId": 2918,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2920,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2922,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2924,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2926,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "title",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2928,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "lockDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2930,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "startTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2932,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "lockToken",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2934,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "withdrawn",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 2936,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "accumulatedRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Set)1232_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1227,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1231,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TargetSavings)2956_storage": {
        "encoding": "inplace",
        "label": "struct ThriveUtils.TargetSavings",
        "members": [
          {
            "astId": 2939,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2941,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "purpose",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2943,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "targetAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2945,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "currentAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2947,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2949,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2951,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "completed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 2953,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "accumulatedRewards",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2955,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "lastDepositTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(UintSet)1704_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1703,
            "contract": "contracts/Thrive.sol:Thrive",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1232_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}